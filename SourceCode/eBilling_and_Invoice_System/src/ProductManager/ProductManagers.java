/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ProductManager;

import Connection.DataConnect;
import ProductType.ProductType;
import ProductType.ProductTypeManager;
import SupplierManager.Supplier;
import SupplierManager.SupplierManager;
import Validate.CheckForm;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author MrDuc
 */
public class ProductManagers extends javax.swing.JPanel {

    /**
     * Creates new form ProductManagers
     */
    ProductTableModel productTableModel = new ProductTableModel();
    ProductManager productManager = new ProductManager();
    ProductTypeManager pro = new ProductTypeManager();
    ProductType producType = new ProductType();
    SupplierManager Supplier = new SupplierManager();
    Supplier supplier2 = new Supplier();
    Connection con = null;
    protected PreparedStatement ps;

    public ProductManagers() {
        initComponents();
        con = DataConnect.connectData();
        JTableProduct.setModel(productTableModel);
        loadProductTable();
        loadProductType();
        loadSuppler();
    }

    private void loadProductTable() {
        productTableModel.addListToTheTable(productManager.loadProducts());
    }
    //Load Combobox Product Type
    List<ProductType> listProductType = pro.loadProductType();

    private void loadProductType() {
        for (ProductType productType : listProductType) {
            cbbProductType.addItem(productType.getType_Name());
            cbbInfor_Type.addItem(productType.getType_Name());
        }
    }
    /////////////////////////////////////////////////////////////
    //Load Combobox Product Supplier
    List<Supplier> listSupplier = Supplier.loadSupplier();

    private void loadSuppler() {
        for (Supplier suppler : listSupplier) {
            cbbSupplier.addItem(suppler.getSupplierName());
            cbbInfor_Supplier.addItem(suppler.getSupplierName());
        }
    }

    /////////////////////////////////////////////////////////////
    //Lay gia tri tren bang
    private int getSelectedRowIndexOfProduct() {
        return JTableProduct.getSelectedRow();
    }

    private String getValueOfProductAt(int row, int column) {
        return productTableModel.getValueAt(row, column).toString();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTableProduct = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtCode = new javax.swing.JTextField();
        txtInfor_Name = new javax.swing.JTextField();
        cbbInfor_Type = new javax.swing.JComboBox();
        cbbInfor_Supplier = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtInfor_Price = new javax.swing.JTextField();
        txtInfor_Amount = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        txaInfor = new javax.swing.JTextArea();
        jLabel13 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        cbbProductType = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        cbbSupplier = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        cbbFromPrice = new javax.swing.JComboBox();
        btnSearch = new javax.swing.JButton();

        JTableProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        JTableProduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JTableProductMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(JTableProduct);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Product Information"));

        jLabel6.setText("Code :");

        jLabel7.setText("Name :");

        jLabel8.setText("Type :");

        jLabel9.setText("Supplier :");

        txtCode.setEditable(false);

        cbbInfor_Type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Please Choose" }));
        cbbInfor_Type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbbInfor_TypeActionPerformed(evt);
            }
        });

        cbbInfor_Supplier.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Please Choose" }));

        jLabel10.setText("Price :");

        jLabel11.setText("Amount :");

        jLabel12.setText("Infor :");

        txaInfor.setColumns(20);
        txaInfor.setRows(5);
        jScrollPane2.setViewportView(txaInfor);

        jLabel13.setText("VND");

        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/add.png"))); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Update.png"))); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Remove.png"))); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/reset.png"))); // NOI18N
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnAdd)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete)
                        .addGap(18, 18, 18)
                        .addComponent(btnReset))
                    .addComponent(cbbInfor_Supplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCode, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtInfor_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cbbInfor_Type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(61, 61, 61)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel12))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtInfor_Price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                                    .addComponent(txtInfor_Amount))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel13)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAdd, btnDelete, btnReset, btnUpdate});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel6, jLabel7, jLabel8, jLabel9});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cbbInfor_Supplier, cbbInfor_Type, jScrollPane2, txtCode, txtInfor_Amount, txtInfor_Name, txtInfor_Price});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel10, jLabel11, jLabel12});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addComponent(txtInfor_Price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtInfor_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(txtInfor_Amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(cbbInfor_Type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(cbbInfor_Supplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnReset))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Search Product"));

        jLabel1.setText("Name :");

        jLabel2.setText("Product Type:");

        cbbProductType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Please Choose" }));
        cbbProductType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbbProductTypeItemStateChanged(evt);
            }
        });

        jLabel3.setText("Supplier");

        cbbSupplier.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Please Choose" }));
        cbbSupplier.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbbSupplierItemStateChanged(evt);
            }
        });

        jLabel4.setText("Price :");

        cbbFromPrice.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Please Choose!", "500.000 - 1.000.000", "1.000.000 -1.500.000", "1.500.000 - 2.000.000", "2.000.000 - 5.000.000", "5.000.000 - 10.000.000" }));
        cbbFromPrice.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbbFromPriceItemStateChanged(evt);
            }
        });

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/search_Icon_1.png"))); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSearch)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(cbbProductType, 0, 150, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(cbbSupplier, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(40, 40, 40)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbbFromPrice, 0, 150, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cbbFromPrice, cbbProductType, cbbSupplier, txtName});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(cbbProductType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(cbbSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(cbbFromPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSearch))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cbbInfor_TypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbbInfor_TypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbbInfor_TypeActionPerformed

    private void JTableProductMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JTableProductMouseClicked
        txtCode.setText(getValueOfProductAt(getSelectedRowIndexOfProduct(), 0));
        txtInfor_Name.setText(getValueOfProductAt(getSelectedRowIndexOfProduct(), 1));
        txtInfor_Price.setText(getValueOfProductAt(getSelectedRowIndexOfProduct(), 4));
        txtInfor_Amount.setText(getValueOfProductAt(getSelectedRowIndexOfProduct(), 5));
        txaInfor.setText(getValueOfProductAt(getSelectedRowIndexOfProduct(), 6));
        //set to combobox Type
        String index =getValueOfProductAt(getSelectedRowIndexOfProduct(), 2);
        List<ProductType> listProductType = pro.loadProductType();
        for (int i = 0; i < listProductType.size(); i++) {
            producType = (ProductType) listProductType.get(i);
            if (index.equals(producType.getType_Name())) {
                cbbInfor_Type.setSelectedItem(producType.getType_Name());
            }
        }
        //set to combobox Supplier
        String index2 =getValueOfProductAt(getSelectedRowIndexOfProduct(), 3);
        List<Supplier> listSuppliers = Supplier.loadSupplier();
        for (int i = 0; i < listSuppliers.size(); i++) {
            supplier2 = (Supplier) listSuppliers.get(i);
            if (index2.equals(supplier2.getSupplierName())) {
                cbbInfor_Supplier.setSelectedItem(supplier2.getSupplierName());
            }
        }
    }//GEN-LAST:event_JTableProductMouseClicked
    public boolean checkProductName() {
        String name = txtInfor_Name.getText().trim();
        boolean test = false;
        try {
            String query = "select PRODUCT_NAME from PRODUCT";
            ps = con.prepareStatement(query);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                if (name.equals(rs.getString("PRODUCT_NAME"))) {
                    txtInfor_Name.setText("");
                    txtInfor_Name.requestFocus();
                    test = true;
                }
            }
            if (test == true) {
                JOptionPane.showMessageDialog(this, "Product Name existed !", "Add new Product", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (SQLException ex) {
        }
        return test;
    }
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        if (txtInfor_Name.getText().isEmpty() || txtInfor_Name.getText() == "") {
            JOptionPane.showMessageDialog(this, "ProductName is not empty!", "Warning!", 2);
            txtInfor_Name.requestFocus();
            return;
        }
        if (!CheckForm.checkUsername(txtInfor_Name.getText())) {
            JOptionPane.showMessageDialog(this, "Invalid ProductName, only be entered from a-z,A-Z,0-9 and 4-10 characters.", "Warning!", 2);
            txtInfor_Name.requestFocus();
            return;
        }
        if (cbbInfor_Type.getSelectedItem().equals("Please Choose")) {
            JOptionPane.showMessageDialog(this, "Customer Type is not select !", "Add Product", JOptionPane.ERROR_MESSAGE);
            cbbInfor_Type.requestFocus();
        }
        if (cbbInfor_Supplier.getSelectedItem().equals("Please Choose")) {
            JOptionPane.showMessageDialog(this, "Supplier is not select !", "Add Product", JOptionPane.ERROR_MESSAGE);
            cbbInfor_Supplier.requestFocus();
        }
        if (txtInfor_Price.getText().isEmpty() || txtInfor_Price.getText() == "") {
            JOptionPane.showMessageDialog(this, "Product Price is not empty!", "Warning!", 2);
            txtInfor_Price.requestFocus();
            return;
        }
        if (!CheckForm.checkPrice(txtInfor_Price.getText())) {
            JOptionPane.showMessageDialog(this, "Invalid Customer Price, only be entered from 0-9 and 4-10 characters.", "Warning!", 2);
            txtInfor_Price.requestFocus();
            return;
        }
        if (txtInfor_Amount.getText().isEmpty() || txtInfor_Amount.getText() == "") {
            JOptionPane.showMessageDialog(this, "Product Amount is not empty!", "Warning!", 2);
            txtInfor_Amount.requestFocus();
            return;
        }
        if (!CheckForm.checkAmount(txtInfor_Amount.getText())) {
            JOptionPane.showMessageDialog(this, "Invalid Customer Price, only be entered from 0-9 and 1-4 characters.", "Warning!", 2);
            txtInfor_Amount.requestFocus();
            return;
        }
        if (txaInfor.getText().isEmpty() || txaInfor.getText() == "") {
            JOptionPane.showMessageDialog(this, "Product Information is not empty!", "Warning!", 2);
            txaInfor.requestFocus();
            return;
        }
        if (!CheckForm.checkAddress(txaInfor.getText())) {
            JOptionPane.showMessageDialog(this, "Invalid Customer Information, only be entered from a-z,0-9 and 5-50 characters.", "Warning!", 2);
            txaInfor.requestFocus();
            return;
        }
        if (checkProductName()) {
            return;
        } else {
            Product p = new Product();
//        p.setProduct_Code(Integer.parseInt(txtCode.getText()));
            p.setProduct_Name(txtInfor_Name.getText());
            p.setProduct_AvailableAmount(Integer.parseInt(txtInfor_Amount.getText()));
            p.setProduct_Price(Integer.parseInt(txtInfor_Price.getText()));
            p.setProduct_infor(txaInfor.getText());

            List<ProductType> listProductTypes = pro.loadProductType();
            for (ProductType listProductType1 : listProductTypes) {
                producType = (ProductType) listProductType1;
                if (cbbInfor_Type.getSelectedItem().equals(producType.getType_Name())) {
                    p.setProduct_Type(Integer.toString(producType.getType_Code()));
                }
            }

            List<Supplier> listSuppliers = Supplier.loadSupplier();
            for (Supplier supplier : listSuppliers) {
                supplier2 = supplier;
                if (cbbInfor_Supplier.getSelectedItem().equals(supplier2.getSupplierName())) {
                    p.setSupplier_Code(Integer.toString(supplier2.getSupplierCode()));
                }
            }
            productManager.addProduct(p);
            Reset();
            JOptionPane.showMessageDialog(this, "Product Added");
            loadProductTable();
        }

    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        Product p = new Product();
        if (txtInfor_Name.getText().isEmpty() || txtInfor_Name.getText() == "") {
            JOptionPane.showMessageDialog(this, "ProductName is not empty!", "Warning!", 2);
            txtInfor_Name.requestFocus();
            return;
        }
        if (!CheckForm.checkUsername(txtInfor_Name.getText())) {
            JOptionPane.showMessageDialog(this, "Invalid ProductName, only be entered from a-z,A-Z,0-9 and 4-10 characters.", "Warning!", 2);
            txtInfor_Name.requestFocus();
            return;
        }
        if (cbbInfor_Type.getSelectedItem().equals("Please Choose")) {
            JOptionPane.showMessageDialog(this, "Customer Type is not select !", "Add Product", JOptionPane.ERROR_MESSAGE);
            cbbInfor_Type.requestFocus();
        }
        if (cbbInfor_Supplier.getSelectedItem().equals("Please Choose")) {
            JOptionPane.showMessageDialog(this, "Supplier is not select !", "Add Product", JOptionPane.ERROR_MESSAGE);
            cbbInfor_Supplier.requestFocus();
        }
        if (txtInfor_Price.getText().isEmpty() || txtInfor_Price.getText() == "") {
            JOptionPane.showMessageDialog(this, "Product Price is not empty!", "Warning!", 2);
            txtInfor_Price.requestFocus();
            return;
        }
        if (!CheckForm.checkPrice(txtInfor_Price.getText())) {
            JOptionPane.showMessageDialog(this, "Invalid Customer Price, only be entered from 0-9 and 4-10 characters.", "Warning!", 2);
            txtInfor_Price.requestFocus();
            return;
        }
        if (txtInfor_Amount.getText().isEmpty() || txtInfor_Amount.getText() == "") {
            JOptionPane.showMessageDialog(this, "Product Amount is not empty!", "Warning!", 2);
            txtInfor_Amount.requestFocus();
            return;
        }
        if (!CheckForm.checkAmount(txtInfor_Amount.getText())) {
            JOptionPane.showMessageDialog(this, "Invalid Customer Price, only be entered from 0-9 and 1-4 characters.", "Warning!", 2);
            txtInfor_Amount.requestFocus();
            return;
        }
        if (txaInfor.getText().isEmpty() || txaInfor.getText() == "") {
            JOptionPane.showMessageDialog(this, "Product Information is not empty!", "Warning!", 2);
            txaInfor.requestFocus();
            return;
        }
        if (!CheckForm.checkAddress(txaInfor.getText())) {
            JOptionPane.showMessageDialog(this, "Invalid Customer Information, only be entered from a-z,0-9 and 5-50 characters.", "Warning!", 2);
            txaInfor.requestFocus();
            return;
        }
        if (checkProductName()) {
            return;
        } else {
            //       p.setProduct_Code(Integer.parseInt(txtCode.getText()));
            p.setProduct_Name(txtInfor_Name.getText());
            p.setProduct_AvailableAmount(Integer.parseInt(txtInfor_Amount.getText()));
            p.setProduct_Price(Integer.parseInt(txtInfor_Price.getText()));
            p.setProduct_infor(txaInfor.getText());

            List<ProductType> listProductTypes = pro.loadProductType();
            for (ProductType listProductType1 : listProductTypes) {
                producType = (ProductType) listProductType1;
                if (cbbInfor_Type.getSelectedItem().equals(producType.getType_Name())) {
                    p.setProduct_Type(Integer.toString(producType.getType_Code()));
                }
            }

            List<Supplier> listSuppliers = Supplier.loadSupplier();
            for (Supplier supplier : listSuppliers) {
                supplier2 = supplier;
                if (cbbInfor_Supplier.getSelectedItem().equals(supplier2.getSupplierName())) {
                    p.setSupplier_Code(Integer.toString(supplier2.getSupplierCode()));
                }
            }
            productManager.updateProduct(p);
            Reset();
            JOptionPane.showMessageDialog(this, "Product Update");
            loadProductTable();
        }

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        String name = txtInfor_Name.getText();
        if (name.isEmpty() || name == "") {
            JOptionPane.showMessageDialog(this, "Please choose Product!", "Warning!", 2);
            txtInfor_Name.requestFocus();
            return;
        }
        int show = JOptionPane.showConfirmDialog(this, "Are you sure delete Product ?", "Remove Product", JOptionPane.YES_NO_OPTION);
        if (show == JOptionPane.YES_OPTION) {
            for (Object o : SelectedCellValuesByColumn(0)) {
                productManager.DeleteProduct(Integer.parseInt(o.toString()));
            }
            loadProductTable();
            JOptionPane.showMessageDialog(this, "Done");
        } else {
            JOptionPane.showMessageDialog(this, "Delete Product Cancel", "Remove Product", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        Reset();
    }//GEN-LAST:event_btnResetActionPerformed
    ProductType protype = new ProductType();
    ProductTypeManager protypeManager = new ProductTypeManager();
    ProductManager proManager = new ProductManager();
    ProductTableModel ProTable = new ProductTableModel();
    private void cbbProductTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbbProductTypeItemStateChanged
        if (cbbProductType.getSelectedIndex() == 0) {
            ProductTableModel protable3 = new ProductTableModel();
            ProductManager promana3 = new ProductManager();
            protable3.addListToTheTable(promana3.loadProducts());
            JTableProduct.setModel(protable3);
        } else {
            int productTypeCode = 0;
            List<ProductType> listProType = protypeManager.loadProductType();
            for (ProductType productType : listProType) {
                protype = productType;
                if (cbbProductType.getSelectedItem().equals(protype.getType_Name())) {
                    productTypeCode = protype.getType_Code();
                }
            }
            List<Product> listpro = proManager.searchProductsByProductTypeCode(Integer.toString(productTypeCode));
            ProTable.addListToTheTable(listpro);
            JTableProduct.setModel(ProTable);
        }

    }//GEN-LAST:event_cbbProductTypeItemStateChanged
    SupplierManager supManager = new SupplierManager();
    Supplier sup = new Supplier();
    ProductManager proManager2 = new ProductManager();
    ProductTableModel ProTable2 = new ProductTableModel();
    private void cbbSupplierItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbbSupplierItemStateChanged
        if (cbbSupplier.getSelectedIndex() == 0) {
            ProductTableModel protable4 = new ProductTableModel();
            ProductManager promana4 = new ProductManager();
            protable4.addListToTheTable(promana4.loadProducts());
            JTableProduct.setModel(protable4);
        } else {
            int SupplierCode = 0;
            List<Supplier> listSupCode = supManager.loadSupplier();
            for (Supplier Sup : listSupCode) {
                sup = Sup;
                if (cbbSupplier.getSelectedItem().equals(sup.getSupplierName())) {
                    SupplierCode = sup.getSupplierCode();
                }
            }
            List<Product> listpro = proManager2.searchProductsBySupplierCode(Integer.toString(SupplierCode));
            ProTable2.addListToTheTable(listpro);
            JTableProduct.setModel(ProTable2);
        }

    }//GEN-LAST:event_cbbSupplierItemStateChanged

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        if (txtName.getText().isEmpty() || txtName.getText() == "") {
            JOptionPane.showMessageDialog(this, "ProductName is not empty!", "Warning!", 2);
            txtName.requestFocus();
            return;
        }
        if (!CheckForm.checkUsername(txtName.getText())) {
            JOptionPane.showMessageDialog(this, "Invalid ProductName, only be entered from a-z,A-Z,0-9 and 4-10 characters.", "Warning!", 2);
            txtName.requestFocus();
            return;
        } else {
            ProductManager promana3 = new ProductManager();
            ProductTableModel protable3 = new ProductTableModel();
            String name = txtName.getText();
            List<Product> listpro3 = promana3.searchProductsByName(name);
            protable3.addListToTheTable(listpro3);
            JTableProduct.setModel(protable3);
        }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void cbbFromPriceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbbFromPriceItemStateChanged
        ProductManager promana4 = new ProductManager();
        ProductTableModel protable4 = new ProductTableModel();
        int price1 = 0;
        int price2 = 0;
        Product p = new Product();
        List<Product> listName = new LinkedList<>();
        List<Product> listpro4 = promana4.loadProducts();
        if (cbbFromPrice.getSelectedIndex() == 0) {
            protable4.addListToTheTable(listpro4);
            JTableProduct.setModel(protable4);
        }
        if (cbbFromPrice.getSelectedItem().equals("500.000 - 1.000.000")) {
            price1 = 500000;
            price2 = 1000000;
            for (Product product : listpro4) {
                p = product;
                if (p.getProduct_Price() >= price1 && p.getProduct_Price() <= price2) {
                    int procode = p.getProduct_Code();
                    String name = p.getProduct_Name();
                    String type = p.getProduct_Type();
                    String supType = p.getSupplier_Code();
                    int price = p.getProduct_Price();
                    int amount = p.getProduct_AvailableAmount();
                    String info = p.getProduct_infor();
                    listName.add(new Product(procode, name, type, supType, price, amount, info));
                    protable4.addListToTheTable(listName);
                    JTableProduct.setModel(protable4);
                }
            }

        }

        if (cbbFromPrice.getSelectedItem().equals("1.000.000 -1.500.000")) {
            price1 = 1000000;
            price2 = 1500000;
            for (Product product : listpro4) {
                p = product;
                if (p.getProduct_Price() >= price1 && p.getProduct_Price() <= price2) {
                    int procode = p.getProduct_Code();
                    String name = p.getProduct_Name();
                    String type = p.getProduct_Type();
                    String supType = p.getSupplier_Code();
                    int price = p.getProduct_Price();
                    int amount = p.getProduct_AvailableAmount();
                    String info = p.getProduct_infor();
                    listName.add(new Product(procode, name, type, supType, price, amount, info));
                    protable4.addListToTheTable(listName);
                    JTableProduct.setModel(protable4);
                }
            }

        }
        if (cbbFromPrice.getSelectedItem().equals("1.500.000 - 2.000.000")) {
            price1 = 1500000;
            price2 = 2000000;
            for (Product product : listpro4) {
                p = product;
                if (p.getProduct_Price() >= price1 && p.getProduct_Price() <= price2) {
                    int procode = p.getProduct_Code();
                    String name = p.getProduct_Name();
                    String type = p.getProduct_Type();
                    String supType = p.getSupplier_Code();
                    int price = p.getProduct_Price();
                    int amount = p.getProduct_AvailableAmount();
                    String info = p.getProduct_infor();
                    listName.add(new Product(procode, name, type, supType, price, amount, info));
                    protable4.addListToTheTable(listName);
                    JTableProduct.setModel(protable4);
                }
            }

        }
        if (cbbFromPrice.getSelectedItem().equals("2.000.000 - 5.000.000")) {
            price1 = 2000000;
            price2 = 5000000;
            for (Product product : listpro4) {
                p = product;
                if (p.getProduct_Price() >= price1 && p.getProduct_Price() <= price2) {
                    int procode = p.getProduct_Code();
                    String name = p.getProduct_Name();
                    String type = p.getProduct_Type();
                    String supType = p.getSupplier_Code();
                    int price = p.getProduct_Price();
                    int amount = p.getProduct_AvailableAmount();
                    String info = p.getProduct_infor();
                    listName.add(new Product(procode, name, type, supType, price, amount, info));
                    protable4.addListToTheTable(listName);
                    JTableProduct.setModel(protable4);
                }
            }
        }
        if (cbbFromPrice.getSelectedItem().equals("5.000.000 - 10.000.000")) {
            price1 = 5000000;
            price2 = 10000000;
            for (Product product : listpro4) {
                p = product;
                if (p.getProduct_Price() >= price1 && p.getProduct_Price() <= price2) {
                    int procode = p.getProduct_Code();
                    String name = p.getProduct_Name();
                    String type = p.getProduct_Type();
                    String supType = p.getSupplier_Code();
                    int price = p.getProduct_Price();
                    int amount = p.getProduct_AvailableAmount();
                    String info = p.getProduct_infor();
                    listName.add(new Product(procode, name, type, supType, price, amount, info));
                    protable4.addListToTheTable(listName);
                    JTableProduct.setModel(protable4);
                }
            }

        }

    }//GEN-LAST:event_cbbFromPriceItemStateChanged

    public void Reset() {
        txtCode.setText("");
        txtInfor_Name.setText("");
        txtInfor_Amount.setText("");
        txtInfor_Price.setText("");
        cbbInfor_Type.setSelectedIndex(0);
        cbbInfor_Supplier.setSelectedIndex(0);
        txaInfor.setText("");
    }

    private Object[] SelectedCellValuesByColumn(int column) {
        int[] selectedRows = JTableProduct.getSelectedRows();
        Object[] selectedValues = new Object[selectedRows.length];
        int para = 0;
        for (int i : selectedRows) {
            selectedValues[para++] = JTableProduct.getModel().getValueAt(i, column);
        }
        return selectedValues;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable JTableProduct;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox cbbFromPrice;
    private javax.swing.JComboBox cbbInfor_Supplier;
    private javax.swing.JComboBox cbbInfor_Type;
    private javax.swing.JComboBox cbbProductType;
    private javax.swing.JComboBox cbbSupplier;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea txaInfor;
    private javax.swing.JTextField txtCode;
    private javax.swing.JTextField txtInfor_Amount;
    private javax.swing.JTextField txtInfor_Name;
    private javax.swing.JTextField txtInfor_Price;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables
}
