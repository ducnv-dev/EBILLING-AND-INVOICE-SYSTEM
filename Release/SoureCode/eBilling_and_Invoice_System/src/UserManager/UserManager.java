/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserManager;

import Connection.DataConnect;
import UserType.UserType;
import UserType.UserTypeManager;
import Validate.CheckForm;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author Mr_Duc
 */
public class UserManager extends javax.swing.JPanel {

    /**
     * Creates new form UserManager
     */
    UserTableModel userTableModel = new UserTableModel();
    UserManagers userManager = new UserManagers();
    UserType userType = new UserType();
    UserTypeManager userTypeManager = new UserTypeManager();
    Connection con = null;
    protected PreparedStatement ps;

    public UserManager() {
        initComponents();
        con = DataConnect.connectData();
        loadUserTable();
        loadProductType();
        rb_Active.setSelected(true);
    }

    public void loadUserTable() {
        JTable_UserList.setModel(userTableModel);
        userTableModel.addListToTheTable(userManager.loadUser());
    }
    //Load Combobox User Type
    List<UserType> listUserType = userTypeManager.loadUserType();

    private void loadProductType() {
        for (UserType userType1 : listUserType) {
            cbbUserType.addItem(userType1.getUserTypeName());
        }
    }

    //Lay gia tri tren bang
    private int getSelectedRowIndexOfProduct() {
        return JTable_UserList.getSelectedRow();
    }

    private String getValueOfProductAt(int row, int column) {
        return JTable_UserList.getValueAt(row, column).toString();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        JPanel_UserList = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTable_UserList = new javax.swing.JTable();
        JPanel_UserInfor = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtUserCode = new javax.swing.JTextField();
        txtUserName = new javax.swing.JTextField();
        Jpass_Password = new javax.swing.JPasswordField();
        txtFullName = new javax.swing.JTextField();
        cbbUserType = new javax.swing.JComboBox();
        rb_Active = new javax.swing.JRadioButton();
        rb_NotActive = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txa_Address = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtPhone = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();

        JPanel_UserList.setBorder(javax.swing.BorderFactory.createTitledBorder("User List"));

        JTable_UserList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        JTable_UserList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JTable_UserListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(JTable_UserList);

        javax.swing.GroupLayout JPanel_UserListLayout = new javax.swing.GroupLayout(JPanel_UserList);
        JPanel_UserList.setLayout(JPanel_UserListLayout);
        JPanel_UserListLayout.setHorizontalGroup(
            JPanel_UserListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        JPanel_UserListLayout.setVerticalGroup(
            JPanel_UserListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
        );

        JPanel_UserInfor.setBorder(javax.swing.BorderFactory.createTitledBorder("Infomation User"));

        jLabel1.setText("Code :");

        jLabel2.setText("UserName :");

        jLabel3.setText("Password :");

        jLabel4.setText("FullName :");

        jLabel5.setText("User Type :");

        jLabel6.setText("User Active :");

        cbbUserType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Please Choose!" }));

        buttonGroup1.add(rb_Active);
        rb_Active.setText("Active");

        buttonGroup1.add(rb_NotActive);
        rb_NotActive.setText("Not Active");

        jLabel7.setText("Address :");

        txa_Address.setColumns(20);
        txa_Address.setRows(5);
        jScrollPane2.setViewportView(txa_Address);

        jLabel8.setText("Phone :");

        jLabel9.setText("Email :");

        javax.swing.GroupLayout JPanel_UserInforLayout = new javax.swing.GroupLayout(JPanel_UserInfor);
        JPanel_UserInfor.setLayout(JPanel_UserInforLayout);
        JPanel_UserInforLayout.setHorizontalGroup(
            JPanel_UserInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPanel_UserInforLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(JPanel_UserInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(JPanel_UserInforLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(txtUserCode, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(JPanel_UserInforLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(JPanel_UserInforLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(Jpass_Password))
                    .addGroup(JPanel_UserInforLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(txtFullName))
                    .addGroup(JPanel_UserInforLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(cbbUserType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(JPanel_UserInforLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(rb_Active)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rb_NotActive)))
                .addGap(122, 122, 122)
                .addGroup(JPanel_UserInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addGap(18, 18, 18)
                .addGroup(JPanel_UserInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
                    .addComponent(txtPhone)
                    .addComponent(txtEmail))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        JPanel_UserInforLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel2, jLabel3, jLabel4, jLabel5, jLabel6});

        JPanel_UserInforLayout.setVerticalGroup(
            JPanel_UserInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPanel_UserInforLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(JPanel_UserInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPanel_UserInforLayout.createSequentialGroup()
                        .addGroup(JPanel_UserInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtUserCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(JPanel_UserInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(JPanel_UserInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(Jpass_Password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(JPanel_UserInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtFullName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(JPanel_UserInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(cbbUserType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(JPanel_UserInforLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(rb_Active)
                            .addComponent(rb_NotActive)
                            .addComponent(jLabel9)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/add.png"))); // NOI18N
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Update.png"))); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Remove.png"))); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/reset.png"))); // NOI18N
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(JPanel_UserList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(JPanel_UserInfor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(236, 236, 236)
                .addComponent(btnAdd)
                .addGap(18, 18, 18)
                .addComponent(btnUpdate)
                .addGap(18, 18, 18)
                .addComponent(btnDelete)
                .addGap(18, 18, 18)
                .addComponent(btnReset)
                .addContainerGap(280, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAdd, btnDelete, btnReset, btnUpdate});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(JPanel_UserList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JPanel_UserInfor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnReset, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void JTable_UserListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JTable_UserListMouseClicked
        txtUserCode.setText(getValueOfProductAt(getSelectedRowIndexOfProduct(), 0));
        txtUserName.setText(getValueOfProductAt(getSelectedRowIndexOfProduct(), 1));
        Jpass_Password.setText(getValueOfProductAt(getSelectedRowIndexOfProduct(), 2));
        txtFullName.setText(getValueOfProductAt(getSelectedRowIndexOfProduct(), 3));
//        typecode.setText(getValueOfProductAt(getSelectedRowIndexOfProduct(),3));
//        txtFullName.setText(getValueOfProductAt(getSelectedRowIndexOfProduct(),3));
        txa_Address.setText(getValueOfProductAt(getSelectedRowIndexOfProduct(), 5));
        txtPhone.setText(getValueOfProductAt(getSelectedRowIndexOfProduct(), 6));
        txtEmail.setText(getValueOfProductAt(getSelectedRowIndexOfProduct(), 7));
        /////////////
        String index = getValueOfProductAt(getSelectedRowIndexOfProduct(), 4);
        List<UserType> listUserType = userTypeManager.loadUserType();
        for (UserType listUserType1 : listUserType) {
            userType = (UserType) listUserType1;
            if (index.equals(userType.getUserTypeCode())) {
                cbbUserType.setSelectedItem(userType.getUserTypeName());
            }
        }
        ///////////////////////
        String index2 = getValueOfProductAt(getSelectedRowIndexOfProduct(), 8);
        if (index2.equals(1)) {
            rb_Active.setSelected(true);
        } else {
            rb_NotActive.setSelected(true);
        }
    }//GEN-LAST:event_JTable_UserListMouseClicked

    public boolean checkUserName() {
        String name = txtUserName.getText().trim();
        boolean test = false;
        try {
            String query = "select userLogin from Users";
            ps = con.prepareStatement(query);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                if (name.equals(rs.getString("userLogin"))) {
                    txtUserName.setText("");
                    txtUserName.requestFocus();
                    test = true;
                }
            }
            if (test == true) {
                JOptionPane.showMessageDialog(this, "Customer Name existed !", "Add new Customer", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (SQLException ex) {
        }
        return test;
    }
    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        //int code = Integer.parseInt(txtUserCode.getText());
        String userLogin = txtUserName.getText();
        String userPass = Jpass_Password.getText();
        String userFullName = txtFullName.getText();
        //String userTypeCode =.getText();
        //String userLogin = txtUserName.getText();
        String userAddress = txa_Address.getText();
        String userPhone = txtPhone.getText();
        String userEmail = txtEmail.getText();
        String userTypeCode = null;
        int Active;

        List<UserType> listUserTypes = userTypeManager.loadUserType();
        for (UserType userType1 : listUserTypes) {
            userType = userType1;
            if (cbbUserType.getSelectedItem().equals(userType.getUserTypeName())) {
                userTypeCode = userType.getUserTypeCode();
            }
        }
        if (rb_Active.isSelected() == true) {
            Active = 1;
        } else {
            Active = 0;
        }
        if (userLogin.isEmpty() || userLogin == "") {
            JOptionPane.showMessageDialog(this, "UserName is not empty!", "Warning!", 2);
            txtUserName.requestFocus();
            return;
        }
        if (!CheckForm.checkUsername(userLogin)) {
            JOptionPane.showMessageDialog(this, "Invalid UserName, only be entered from a-z,0-9 and 4-10 characters.", "Warning!", 2);
            txtUserName.requestFocus();
            return;
        }
        if (userPass.isEmpty() || userPass == "") {
            JOptionPane.showMessageDialog(this, "UserPassword is not empty!", "Warning!", 2);
            Jpass_Password.requestFocus();
            return;
        }
        if (!CheckForm.checkPassword(userPass)) {
            JOptionPane.showMessageDialog(this, "Invalid phone number, only be entered from 0-9,a-z,A-Z and 3-11 characters.", "Warning!", 2);
            Jpass_Password.requestFocus();
            return;
        }
        if (userFullName.isEmpty() || userFullName == "") {
            JOptionPane.showMessageDialog(this, "User FullName is not empty!", "Warning!", 2);
            txtFullName.requestFocus();
            return;
        }
        if (!CheckForm.checkName(userFullName)) {
            JOptionPane.showMessageDialog(this, "Invalid User FullName, only be entered from a-z,A-Z and 6-20 characters.", "Warning!", 2);
            txtFullName.requestFocus();
            return;
        }
        if (cbbUserType.getSelectedItem().equals("Please Choose!")) {
            JOptionPane.showMessageDialog(this, "UserType is not select !", "Add User", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (userAddress.isEmpty() || userAddress == "") {
            JOptionPane.showMessageDialog(this, "User Address is not empty!", "Warning!", 2);
            txa_Address.requestFocus();
            return;
        }
        if (!CheckForm.checkAddress(userAddress)) {
            JOptionPane.showMessageDialog(this, "Invalid User Address, only be entered from a-z,A-Z,0-9 and 5-50 characters.", "Warning!", 2);
            txa_Address.requestFocus();
            return;
        }
        if (userPhone.isEmpty() || userPhone == "") {
            JOptionPane.showMessageDialog(this, "UserPhone is not empty!", "Warning!", 2);
            txtPhone.requestFocus();
            return;
        }
        if (!CheckForm.checkPhone(userPhone)) {
            JOptionPane.showMessageDialog(this, "Invalid User PhoneNumber, only be entered from 0-9 and 10-11 characters.", "Warning!", 2);
            txtPhone.requestFocus();
            return;
        }
        if (userEmail.isEmpty() || userEmail == "") {
            JOptionPane.showMessageDialog(this, "User Email is not empty!", "Warning!", 2);
            txtEmail.requestFocus();
            return;
        }
        if (!CheckForm.checkEmail(userEmail)) {
            JOptionPane.showMessageDialog(this, "Invalid User Email", "Warning!", 2);
            txtEmail.requestFocus();
            return;
        }
        if (checkUserName()) {
            return;
        } else {
            User u = new User(1, userLogin, userPass, userFullName, userTypeCode, userAddress, userPhone, userEmail, Active);
            userManager.addUser(u);
            JOptionPane.showMessageDialog(this, "Add User");
            loadUserTable();
            Reset();
        }

    }//GEN-LAST:event_btnAddActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        //int code = Integer.parseInt(txtUserCode.getText());
        String userLogin = txtUserName.getText();
        String userPass = Jpass_Password.getText();
        String userFullName = txtFullName.getText();
        //String userTypeCode =.getText();
        //String userLogin = txtUserName.getText();
        String userAddress = txa_Address.getText();
        String userPhone = txtPhone.getText();
        String userEmail = txtEmail.getText();
        String userTypeCode = null;
        int Active;

        List<UserType> listUserTypes = userTypeManager.loadUserType();
        for (UserType userType1 : listUserTypes) {
            userType = userType1;
            if (cbbUserType.getSelectedItem().equals(userType.getUserTypeName())) {
                userTypeCode = userType.getUserTypeCode();
            }
        }
        if (rb_Active.isSelected() == true) {
            Active = 1;
        } else {
            Active = 0;
        }
        if (userLogin.isEmpty() || userLogin == "") {
            JOptionPane.showMessageDialog(this, "Please choose User!", "Warning!", 2);
            txtUserName.requestFocus();
            return;
        }
        if (userLogin.isEmpty() || userLogin == "") {
            JOptionPane.showMessageDialog(this, "UserName is not empty!", "Warning!", 2);
            txtUserName.requestFocus();
            return;
        }
        if (!CheckForm.checkUsername(userLogin)) {
            JOptionPane.showMessageDialog(this, "Invalid UserName, only be entered from a-z,0-9 and 4-10 characters.", "Warning!", 2);
            txtUserName.requestFocus();
            return;
        }
        if (userPass.isEmpty() || userPass == "") {
            JOptionPane.showMessageDialog(this, "UserPassword is not empty!", "Warning!", 2);
            Jpass_Password.requestFocus();
            return;
        }
        if (!CheckForm.checkPassword(userPass)) {
            JOptionPane.showMessageDialog(this, "Invalid phone number, only be entered from 0-9,a-z,A-Z and 3-11 characters.", "Warning!", 2);
            Jpass_Password.requestFocus();
            return;
        }
        if (userFullName.isEmpty() || userFullName == "") {
            JOptionPane.showMessageDialog(this, "User FullName is not empty!", "Warning!", 2);
            txtFullName.requestFocus();
            return;
        }
        if (!CheckForm.checkName(userFullName)) {
            JOptionPane.showMessageDialog(this, "Invalid User FullName, only be entered from a-z,A-Z and 6-20 characters.", "Warning!", 2);
            txtFullName.requestFocus();
            return;
        }
        if (cbbUserType.getSelectedItem().equals("Please Choose!")) {
            JOptionPane.showMessageDialog(this, "UserType is not select !", "Add User", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (userAddress.isEmpty() || userAddress == "") {
            JOptionPane.showMessageDialog(this, "User Address is not empty!", "Warning!", 2);
            txa_Address.requestFocus();
            return;
        }
        if (!CheckForm.checkAddress(userAddress)) {
            JOptionPane.showMessageDialog(this, "Invalid User Address, only be entered from a-z,A-Z,0-9 and 5-50 characters.", "Warning!", 2);
            txa_Address.requestFocus();
            return;
        }
        if (userPhone.isEmpty() || userPhone == "") {
            JOptionPane.showMessageDialog(this, "UserPhone is not empty!", "Warning!", 2);
            txtPhone.requestFocus();
            return;
        }
        if (!CheckForm.checkPhone(userPhone)) {
            JOptionPane.showMessageDialog(this, "Invalid User PhoneNumber, only be entered from 0-9 and 10-11 characters.", "Warning!", 2);
            txtPhone.requestFocus();
            return;
        }
        if (userEmail.isEmpty() || userEmail == "") {
            JOptionPane.showMessageDialog(this, "User Email is not empty!", "Warning!", 2);
            txtEmail.requestFocus();
            return;
        }
        if (!CheckForm.checkEmail(userEmail)) {
            JOptionPane.showMessageDialog(this, "Invalid User Email", "Warning!", 2);
            txtEmail.requestFocus();
            return;
        }
        if (checkUserName()) {
            return;
        } else {
            int code = Integer.parseInt(txtUserCode.getText());
            User u = new User(code, userLogin, userPass, userFullName, userTypeCode, userAddress, userPhone, userEmail, Active);
            userManager.updateUser(u);
            Reset();
            JOptionPane.showMessageDialog(this, "Update User");
            loadUserTable();
        }

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        String name = txtUserName.getText();
        if (name.isEmpty() || name == "") {
            JOptionPane.showMessageDialog(this, "Please choose User!", "Warning!", 2);
            txtUserName.requestFocus();
            return;
        }
        int show = JOptionPane.showConfirmDialog(this, "Are you sure delete User ?", "Remove Customer", JOptionPane.YES_NO_OPTION);
        if (show == JOptionPane.YES_OPTION) {
            for (Object o : SelectedCellValuesByColumn(0)) {
                userManager.DeleteUser(Integer.parseInt(o.toString()));
            }
            loadUserTable();
            Reset();
            JOptionPane.showMessageDialog(this, "Done");
        } else {
            JOptionPane.showMessageDialog(this, "Delete User Cancel", "Remove User", JOptionPane.INFORMATION_MESSAGE);
        }

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        Reset();
    }//GEN-LAST:event_btnResetActionPerformed
    public void Reset() {
        txtUserCode.setText("");
        txtUserName.setText("");
        Jpass_Password.setText("");
        txtFullName.setText("");
        cbbUserType.setSelectedIndex(0);
        rb_Active.setSelected(true);
        txa_Address.setText("");
        txtPhone.setText("");
        txtEmail.setText("");
    }

    private Object[] SelectedCellValuesByColumn(int column) {
        int[] selectedRows = JTable_UserList.getSelectedRows();
        Object[] selectedValues = new Object[selectedRows.length];
        int para = 0;
        for (int i : selectedRows) {
            selectedValues[para++] = JTable_UserList.getModel().getValueAt(i, column);
        }
        return selectedValues;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel JPanel_UserInfor;
    private javax.swing.JPanel JPanel_UserList;
    private javax.swing.JTable JTable_UserList;
    private javax.swing.JPasswordField Jpass_Password;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnUpdate;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cbbUserType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton rb_Active;
    private javax.swing.JRadioButton rb_NotActive;
    private javax.swing.JTextArea txa_Address;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFullName;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtUserCode;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables
}
